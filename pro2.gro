include gro
set( "dt", 0.05 ); //0.005 
t := 0;

fp := fopen ( "/s1249498/Win7/Desktop/gro_win_beta.4/gro_win_beta.4/tutorials/example2.csv", "w" );

//global conc //

//Ref as global control//
//Ref := 0.2;

	//[D]//
fun conc1 L .
	let d := (sumlist L) in 
		[
			conc_d := d / volume
		]
	end;

	//SIGNALS: Q1 diffusion//
Q1 := 0.5;
diffusion_Q1 := 2; //2
degradation_Q1 := 0.2;
Q1_signal := signal ( diffusion_Q1, degradation_Q1 ); // This command declares a new signal


	//SIGNALS: Q2 diffusion//
Q2 := 0.5;
diffusion_Q2 := 2; //2
degradation_Q2 := 0.2;
Q2_signal := signal ( diffusion_Q2, degradation_Q2 ); // This command declares a new signal



////CONTROL cell/////

program control_cell(control_init) := {

//always green//
	gfp := 1000;
	true : { gfp := volume * 100 };

	
//does not divide//
	set("ecoli_growth_rate", 0.0);  // fL/min
	
//
A_Q2 := 0.0;
B := 0.0;
Ref := 0.1;	

//Q1//
	//synthesis of Q1//
	KQ1 := 0.05;
	rate (KQ1 * B) : { Q1 := Q1 + 1};
	rate ( ( 0.4 * Q1 ) ) : { Q1 := Q1 - 1};
	//selected : {message (1, tostring(id) <> "Q1 in CONTROL: " <> tostring(Q1) )}
	
	//Q1 emitting//
	//Q1 > 0.01 : { emit_signal (Q1_signal, 0.2) } ; //2
	true : { emit_signal (Q1_signal, 2);  };//signal emitted at every dt interval //signal emission rate??

	
//Q2// absorbing
	true : { absorb_signal ( Q2_signal, 0.5 ) }//0.5
	q2_get := get_signal(Q2_signal);
	//rate ( ( 0.4 * Q2 ) ) : { Q2 := Q2 - 1}; 
	//rate ( ( 0.004 * get_signal(Q2_signal) ) ) : { Q2 := Q2 - 1}; 
	rate ( ( 0.4 * q2_get ) ) : { Q2 := Q2 - 1}; 
	//selected : {message (1, tostring(id) <> "Q2 in control: " <> tostring(get_signal (Q2_signal)) )}	
	
	
	

// A:Q2 //

	//producing A:Q2//
	x_r_baseline := 0.1;
	x_r := 2;
	nr := 2;
	Kr := 1;
	x_a_baseline := 0.1;
	x_a := 2;
	nq := 2;
	Kq := 0.1;
	//rate ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (Ref ^ nr)) ))) * (x_a_baseline + (x_a * ( (Q2 ^ nq) / ((Kq ^ nq) + (Q2 ^ nq)) ))) ) : { A_Q2 := A_Q2 + 1 } ;
	//rate ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (Ref ^ nr)) ))) * (x_a_baseline + (x_a * ( ((get_signal(Q2_signal)) ^ nq) / ((Kq ^ nq) + ((get_signal(Q2_signal)) ^ nq)) ))) ) : { A_Q2 := A_Q2 + 1 };
	rate ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (Ref ^ nr)) ))) * (x_a_baseline + (x_a * ( (q2_get ^ nq) / ((Kq ^ nq) + (q2_get ^ nq)) ))) ) : { A_Q2 := A_Q2 + 1 } ;
	//degradating A:Q2//
	delta_aq2 := 1.4; //1.4; 
	rate (delta_aq2 * A_Q2) : { A_Q2 := A_Q2 - 1 };
	//selected : {message (1, tostring(id) <> "A_Q2 in CONTROL: " <> tostring(A_Q2) )}
	
//B//
	
	//producing B//
	x_b_baseline := 0.1;
	x_b := 2;
	nb := 2;
	Kb := 0.5;
	rate (x_b_baseline + (x_b * ((A_Q2 ^ nb)/((Kb ^ nb) +(A_Q2 ^ nb))))) : { B := B + 1 };
	//degradating B//
	delta_B := 1.4; //1.4;  
	rate (delta_B * B) : { B := B - 1 };
	selected : {message (1, tostring(id) <> "B in CONTROL: " <> tostring(B) )}
	
//selected : {message (1, tostring(id) <> "ref in CONTROL: " <> tostring(Ref) )}
};



	
	
////TARGET cell////
program target_cell(target_init) := {

//always red//
	rfp := 1000;
	true : { rfp := volume * 100 };
	
//does not divide//
	set("ecoli_growth_rate", 0.0);
	
//
C := 0.0;
D := 0.0;	

//printing to file
r := [ t := 0, s := 0 ];
	
id = 1 & r.s >= 0.0 : {
 fprint ( fp, r.t, ", ", D , ", ", volume, "\n" ),
 r.s := 0;
 }
 

	
//Q1 absorbing
	true: {absorb_signal ( Q1_signal, 0.5 ) }//0.5
	q1_get := get_signal(Q1_signal);
	//rate ( ( 0.4 * Q1 ) ) : { Q1 := Q1 - 1};
	//rate ( ( 0.004 * get_signal(Q1_signal) ) ) : { Q1 := Q1 - 1};
	rate ( ( 0.4 * q1_get ) ) : { Q1 := Q1 - 1};
	selected : {message (1, tostring(id) <> "Q1 in target: " <> tostring( q1_get / volume) )}	
	
	
//C//
	
	//producing C//
	x_c_baseline := 0.1;
	x_c := 2;
	nc := 2;
	Kc := 0.015;
	
	//rate (x_c_baseline + (x_c * ((Q1 ^ nc)/((Kc ^ nc) +(Q1 ^ nc))))) : { C := C + 1 };
	//rate (x_c_baseline + (x_c * ((get_signal(Q1_signal)) ^ nc)/((Kc ^ nc) +((get_signal(Q1_signal)) ^ nc)))) : { C := C + 1 };
	rate (x_c_baseline + (x_c * ((q1_get ^ nc)/((Kc ^ nc) +(q1_get ^ nc))))) : { C := C + 1 };

	//degradation C//
	delta_C := 1.4; //1.4;  
	rate (delta_C * C) : { C := C - 1 };
	
	selected : {message (1, tostring(id) <> "C in target: " <> tostring(C/volume) )}

//D//
//producing D//

	x_d_baseline := 0.1; //0.1
	x_d := 2; //2
	nd := 2;
	Kd := 0.5;  //0.5
	rate (x_d_baseline + (x_d * ((Kd ^ nd) / ((Kd ^ nd) + (C ^ nd))))) : { D := D + 1 };
	
	//degradation D//
	delta_D := 1.4; //1.4; 
	rate (delta_D * D) : { D := D - 1 };
	selected : {message (1, tostring(id) <> "D in target: " <> tostring(D/volume) )}
	
//Q2//
	//synthesis of Q2//
	KQ2 := 0.05;
	rate (KQ2 * D) : { Q2 := Q2 + 1};
	rate ((0.4 * Q2) ) : { Q2 := Q2 - 1};
	//selected : {message (1, tostring(id) <> "Q1 in target: " <> tostring(get_signal(Q1_signal)) )}
	
	//Q2 emitting//
	//Q2 > 0.01 : { emit_signal (Q2_signal, 0.2); } ; //2
	true : { emit_signal (Q2_signal, 2); }; //signal emission rate?? //signal emitted at every dt interval 
	
	//selected : {message (1, tostring(id) <> "Ref in target: " <> tostring(Ref)) }

true : {
 r.t := r.t + dt,
 r.s := r.s + dt
 }
	
};

ecoli ( [ x := -10, y := 0 ], program control_cell(1) );
ecoli ( [ x := 10, y := 0 ], program target_cell(1) );
