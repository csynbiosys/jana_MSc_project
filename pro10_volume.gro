include gro
set( "dt", 0.05 ); //0.005 


//writing to file
fp := fopen ( "/s1249498/Win7/Desktop/gro_win_beta.4/gro_win_beta.4/tutorials/example2.csv", "w" );
fb := fopen ( "/s1249498/Win7/Desktop/gro_win_beta.4/gro_win_beta.4/tutorials/example1.csv", "w" );
fd := fopen ( "/s1249498/Win7/Desktop/gro_win_beta.4/gro_win_beta.4/tutorials/example21.csv", "w" );



//functions
//B
fun B_synthesis x_b_baseline x_b a_q2 nb Kb . (x_b_baseline + (x_b * ((a_q2 ^ nb)/((Kb ^ nb) +(a_q2 ^ nb)))));
fun B_degradation delta_B b . (delta_B * b);
	
	
//A_Q2
fun A_Q2_synthesis x_r_baseline x_r Kr nr ref x_a_baseline x_a nq Kq q2 . ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + ((get_signal(ref)) ^ nr)) ))) * (x_a_baseline + (x_a * ( (get_signal(q2) ^ nq) / ((Kq ^ nq) + (get_signal(q2) ^ nq)) ))) ) ;
fun A_Q2_degradation delta_aq2 a_q2 . (delta_aq2 * a_q2);
//fun A_Q2_synthesis x_r_baseline x_r Kr nr ref x_a_baseline x_a nq Kq q2. ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (ref ^ nr)) ))) * (x_a_baseline + (x_a * ( (q2 ^ nq) / ((Kq ^ nq) + (q2 ^ nq)) ))) ) ;
//fun A_Q2_synthesis x_r_baseline x_r Kr nr ref x_a_baseline x_a nq Kq q2. ( (x_r_baseline + (x_r * ( (Kr ^ nr) / ((Kr ^ nr) + (ref ^ nr)) ))) * (x_a_baseline + (x_a * ( (((get_signal(q2)) ^ nq) / ((Kq ^ nq) + ((get_signal(q2)) ^ nq)) ))) )) ;


//C
fun C_synthesis x_c_baseline x_c q1 nc Kc . (x_c_baseline + (x_c * ((get_signal(q1) ^ nc)/((Kc ^ nc) + (get_signal(q1) ^ nc)))));
fun C_degradation delta_c c . (delta_c * c);
//fun C_synthesis x_c_baseline x_c q1 nc Kc . (x_c_baseline + (x_c * ((q1 ^ nc)/((Kc ^ nc) +(q1 ^ nc)))));

//D
fun D_synthesis x_d_baseline x_d Kd nd c . (x_d_baseline + (x_d * ((Kd ^ nd) / ((Kd ^ nd) + (c ^ nd)))));
fun D_degradation delta_d d . (delta_d * d);

//Q1
fun Q1_synthesis KQ1 b . (KQ1 * b);
fun Q1_degradation delta_q1 q1 . (delta_q1 * q1);


//Q2
fun Q2_synthesis KQ2 d . (KQ2 * d);
fun Q2_degradation delta_q2 q2 . (delta_q2 * q2);

//
//fun ufunction1 t . (t-300) + (2*(t-700)) - (t - 1100);
//fun ufunction1 t .  (t-300);
//fun ufunction2 t . (t-700);
//fun ufunction3 t . (t - 1100);
//fun rfunction t . ufunction1 t + 2 * ufunction2 t - ufunction3 t;


	//SIGNALS: Q1 diffusion//

diffusion_Q1 := 2; //2
degradation_Q1 := 0.2;
Q1_signal := signal ( degradation_Q1, diffusion_Q1 ); // This command declares a new signal


	//SIGNALS: Q2 diffusion//

diffusion_Q2 := 2; //2
degradation_Q2 := 0.2;
Q2_signal := signal ( degradation_Q2, diffusion_Q2 ); // This command declares a new signal


	//Ref as global control//
ref_sig := signal(0.2, 2); //diffussion rate = 2


//D signal
//D_sig := signal(0.2, 2);

//program

////CONTROL cell/////
program control_cell(control_init) := {

//always green//
	gfp := 1000;
	true : { gfp := volume * 100 };

	
//does not divide//
	set("ecoli_growth_rate", 0.0);  // fL/min
	
//initial
A_Q2 := 0.75013; //0.47779; 
B := 1.06014; //0.675245; //
	
Q1 := 1.32252; //0.842369; 

v := 0;
w := 0;
	
//A_Q2
x_r_baseline1 := 0.1*2.35;
x_r1 := 2*2.35;
nr1 := 2;
Kr1 := 0.5*2.35; //1*2.35
x_a_baseline1 := 0.1*2.35;
x_a1 := 2*2.35;
nq1 := 2;
Kq1 := 0.1*2.35;
delta_aq21 := 1.4; // 1.4


//B
x_b_baseline1 := 0.1*2.35;
x_b1 := 2*2.35;
nb1 := 2;
Kb1 := 0.5*2.35;
delta_B1 := 1.4; // 1.4

//Q1
KQ11 := 0.06; //0.05;
delta_q11 := 0.04; // 0.4


//Q2
delta_q21 := 0.04; // 0.4

//Ref//
	//true : { absorb_signal ( ref_sig, 4 ) }//1
	//ref_get := get_signal(ref_sig);
	
//Q2// absorbing
	//true : { absorb_signal ( Q2_signal, 0.5 ) }//0.5
	//Q2 := get_signal(Q2_signal);
	//q2_get := get_signal(Q2_signal);



r := [ t := 0, s := 0 ];


true: {	absorb_signal ( ref_sig, ( get_signal(ref_sig) * 5 ) ),
		//absorb_signal ( ref_sig, 5),
		v := get_signal(Q2_signal),
		v := v - dt * (Q2_degradation delta_q21 v),
		A_Q2 := A_Q2 + dt * (A_Q2_synthesis x_r_baseline1 x_r1 Kr1 nr1 ref_sig x_a_baseline1 x_a1 nq1 Kq1 Q2_signal),
		//A_Q2 := A_Q2 + dt * (A_Q2_synthesis x_r_baseline1 x_r1 Kr1 nr1 Ref x_a_baseline1 x_a1 nq1 Kq1 Q2_signal),
		A_Q2 := A_Q2 - dt * (A_Q2_degradation delta_aq21 A_Q2), 
		B := B + dt * (B_synthesis x_b_baseline1 x_b1 A_Q2 nb1 Kb1),
		B := B - dt * (B_degradation delta_B1 B),
		Q1 := Q1 + dt * (Q1_synthesis KQ11 B) ,
		Q1 := Q1 - dt * (Q1_degradation delta_q11 Q1),
		emit_signal (Q1_signal, Q1 * 5),
		//emit_signal (Q1_signal, (2 * (get_signal(Q1_signal) - Q1 ))),
		absorb_signal ( Q2_signal, ( get_signal(Q2_signal) * 5 ))
		//absorb_signal ( Q2_signal, 5)
		//absorb_signal ( Q2_signal, (2 * (get_signal(Q2_signal) - v )))
		}


		
		
//Q1 emitting//
//true : { emit_signal (Q1_signal, Q1 * 0.5);  };//signal emitted at every dt interval //signal emission rate?? 
//true : { emit_signal (Q1_signal, 2);  };
//B > 0.20 : {emit_signal (Q1_signal, Q1 * 0.5);}


id = 0 & r.s >= 0.0 : {
	fprint ( fb, r.t, ", ", A_Q2 / volume , ", ", B / volume, ", ", Q1 / volume, ", ", get_signal(ref_sig) / volume, ", ", get_signal(Q2_signal) / volume, ", ", v/volume, "\n" ),
	//fprint ( fb, r.t, ", ", A_Q2 , ", ", B, ", ", Q1, ", ", get_signal(ref_sig), ", ", get_signal(Q2_signal), ", ", v, "\n" ),
	//fprint ( fb, r.t, ", ", get_signal(Q2_signal) /  volume, "\n"),
	r.s := 0;
};

true : {
 r.t := r.t + dt,
 r.s := r.s + dt
 }
	
};


////TARGET cell////
program target_cell(target_init) := {

//always red//
	rfp := 1000;
	true : { rfp := volume * 100 };
	
//does not divide//
	set("ecoli_growth_rate", 0.0);

//
C := 1.94591;  //1.23943; 
D := 0.990317; //0.630775;  	

Q2 := 1.23542;  //0.786892; 
u := 0;

//C	
x_c_baseline1 := 0.1*2.35;
x_c1 := 2*2.35;
nc1 := 2;
Kc1 := 0.005*2.35; //0.015*2.35; 
delta_c1 := 1.4; // 1.4

//D
x_d_baseline1 := 0.1*2.35;
x_d1 := 2*2.35;
nd1 := 2;
Kd1 :=  0.5*2.35; //0.5*2.35;
delta_d1 := 1.4; // 1.4

//Q2
KQ21 := 0.06; //0.05;
delta_q21 := 0.04; // 0.4

//Q1
delta_q11 := 0.04; //0.4

r := [ t := 0, s := 0 ];

//Q1 absorbing
	//true: {absorb_signal ( Q1_signal, 0.5 ) }//2 cuz cell diffusion in paper 2 (so diffuses out and in with the same rate)//0.5
	//q1_get := get_signal(Q1_signal);


true: { absorb_signal ( Q1_signal, ( get_signal(Q1_signal) * 5 )),
		//absorb_signal ( Q1_signal, (2 * (get_signal(Q1_signal) - u ))),
		//absorb_signal ( Q1_signal, 5 ),
		u := get_signal(Q1_signal),
		u := u - dt * (Q1_degradation delta_q11 u),
		C := C + dt * (C_synthesis x_c_baseline1 x_c1 Q1_signal nc1 Kc1),
		C := C - dt * (C_degradation delta_c1 C),
		D := D + dt * (D_synthesis x_d_baseline1 x_d1 Kd1 nd1 C),
		D := D - dt * (D_degradation delta_d1 D ),
		Q2 := Q2 + dt * (Q2_synthesis KQ21 D ),
		Q2 := Q2 - dt * (Q2_degradation delta_q21 Q2),
		emit_signal (Q2_signal, Q2 * 5)
		//emit_signal (Q2_signal, (2 * (get_signal(Q2_signal) - Q2)))
		}

		
//Q2 emitting//
//true : { emit_signal (Q2_signal, Q2 * 0.5);  };//signal emitted at every dt interval //signal emission rate??
//true : { emit_signal (Q2_signal, 2);  };
//D > 0.20 : {emit_signal (Q2_signal, Q2 * 0.5);}

id = 1 & r.s >= 0.0 : {
	fprint ( fp, r.t, ", ", D / volume , ", ", C / volume, ", ", (( get_signal(Q1_signal) ) / volume ), ", ", Q2/volume, ", ", u / volume, "\n" ),
	//fprint ( fp, r.t, ", ", D , ", ", C, ", ", (( get_signal(Q1_signal) ) ), ", ", Q2, ", ", u , "\n" ),
	//fprint ( fp, r.t, ", ", q1_get / volume, ", ", get_signal(Q1_signal) / volume, "\n" ),
	r.s := 0;
};

true : {
 r.t := r.t + dt,
 r.s := r.s + dt
 }
};



program main() := {
 //Fig 3 set up:
 //true : {
 //set_signal(ref_sig,-15,0,11.52) //signal, x coordinate, y coordinate, amount of signal released
 //}
 
 //Fig 4 set up:
 r := [ t := 0, s := 0 ];
 
 true : {
 r.t := r.t + dt,
 r.s := r.s + dt,
 //set_signal(ref_sig,-15,0,(rfunction dt))
  };
 
 //r.s >= 0.0 : { fprint ( fd, r.t, ", ", rfunction dt, ", ", ref_sig, "\n") };
 
 

// holds the concentration at (x,y) for time t at a set concentration 
	r.t <= 300: {
		set_signal(ref_sig,-15,0,0.0)
	};
	r.t >= 300.05 & r.t <= 700 : {
		set_signal(ref_sig,-15,0,1.0)		
	};
	r.t >= 700 & r.t <= 1100 : {
		set_signal(ref_sig,-15,0,3.0)		
	};
	r.t >= 1100 & r.t <= 1500 : {
		set_signal(ref_sig,-15,0,2.0)		
	};
	
	
	
};


ecoli ( [ x := -10, y := 0 ], program control_cell(1) );
ecoli ( [ x := 10, y := 0 ], program target_cell(1) );


